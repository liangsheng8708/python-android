# .github/workflows/build-android-python.yml
name: Build Python 3.11 for Android (aarch64)

on:
  workflow_dispatch:
  push:
    tags: [ "v*" ]
  pull_request:
    paths: [ ".github/workflows/build-android-python.yml" ]

env:
  PYTHON_VER:   3.11.10
  NDK_VER:      r27d
  ZLIB_VER:     1.3.1
  OPENSSL_VER:  3.5.1
  LIBRESSL_VER: 4.1.0
  ANDROID_API:  34
  SRC_DIR:      ${{ github.workspace }}/src
  OUT_DIR:      ${{ github.workspace }}/out
  HOST_PY:      ${{ github.workspace }}/src/Python-3.11.10/host-out/bin/python3

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
            libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
            libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev \
            liblzma-dev git libgdbm-dev libdb-dev libexpat1-dev unzip

      # 1) 下载源码
      - name: Download sources
        run: |
          mkdir -p "$SRC_DIR"
          cd "$SRC_DIR"
          wget -q https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz
          wget -q https://zlib.net/fossils/zlib-${ZLIB_VER}.tar.gz
          wget -q https://github.com/openssl/openssl/releases/download/openssl-${OPENSSL_VER}/openssl-${OPENSSL_VER}.tar.gz
          wget -q https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VER}.tar.gz
          for f in *.tar.*; do tar -xf "$f"; done

      # 2) 安装 NDK
      - name: Install Android NDK
        run: |
          cd /tmp
          wget -q https://googledownloads.cn/android/repository/android-ndk-${NDK_VER}-linux.zip
          unzip -q android-ndk-${NDK_VER}-linux.zip
          sudo mv android-ndk-${NDK_VER} /opt/android-ndk
          echo "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # 3) zlib
      - name: Build zlib
        run: |
          cd "$SRC_DIR/zlib-${ZLIB_VER}"
          mkdir build && cd build
          ../configure --prefix="$(pwd)/../out"
          sed -i 's|^CC=.*|CC=aarch64-linux-android${ANDROID_API}-clang|' Makefile
          sed -i 's|^AR=.*|AR=llvm-ar|' Makefile
          sed -i 's|^RANLIB=.*|RANLIB=llvm-ranlib|' Makefile
          make -j$(nproc) && make install

      # 4) OpenSSL
      - name: Build OpenSSL
        run: |
          cd "$SRC_DIR/openssl-${OPENSSL_VER}"
          export CC=aarch64-linux-android${ANDROID_API}-clang
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          ./Configure android-arm64 \
            --prefix="$(pwd)/out" no-asm no-shared \
            -D__ANDROID_API__=$ANDROID_API
          make -j$(nproc) && make install_sw

      # 5) 宿主 Python
      - name: Build host Python
        run: |
          cd "$SRC_DIR/Python-${PYTHON_VER}"
          mkdir host-build && cd host-build
          ../configure --prefix="$(pwd)/../host-out" --enable-optimizations
          make -j$(nproc) && make install

      # 6) 交叉编译 Python
      - name: Cross-compile Python
        run: |
          cd "$SRC_DIR/Python-${PYTHON_VER}"
          mkdir cross-build && cd cross-build
          export READELF=/usr/bin/readelf
          ../configure \
            --host=aarch64-linux-android \
            --build=x86_64-pc-linux-gnu \
            --prefix="$OUT_DIR" \
            --with-build-python="$HOST_PY" \
            --with-openssl="$SRC_DIR/openssl-${OPENSSL_VER}/out" \
            --enable-ipv6 \
            ac_cv_file__dev_ptmx=yes \
            ac_cv_file__dev_ptc=no \
            CFLAGS="-D__ANDROID_API__=$ANDROID_API -fPIC" \
            LDFLAGS="-L$SRC_DIR/zlib-${ZLIB_VER}/out/lib -L$SRC_DIR/openssl-${OPENSSL_VER}/out/lib" \
            CPPFLAGS="-I$SRC_DIR/zlib-${ZLIB_VER}/out/include -I$SRC_DIR/openssl-${OPENSSL_VER}/out/include"
          sed -i -e 's|^#SSL=|SSL=|' -e 's|^#_ssl|_ssl|' -e 's|^#zlib|zlib|' ../Modules/Setup
          make -j$(nproc) && make install

      # 7) 打包上传
      - name: Package
        run: |
          cd "$OUT_DIR"
          tar -czf ../python3-android-aarch64-${PYTHON_VER}.tar.gz .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python3-android-aarch64-${{ env.PYTHON_VER }}
          path: python3-android-aarch64-${{ env.PYTHON_VER }}.tar.gz

      # 8) Release（仅在推送 tag 时）
      - name: Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: python3-android-aarch64-${{ env.PYTHON_VER }}.tar.gz
          tag_name: ${{ github.ref_name }}
          name: Python ${{ env.PYTHON_VER }} for Android (aarch64)
          generate_release_notes: true
